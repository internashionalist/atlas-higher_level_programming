# DocTest for 7-base_geometry

# Import module
>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

# check area()
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# check integer_validator
>>> bg = BaseGeometry()
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


# valid integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 1)

# case with 0
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

# case with negative
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", -4)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

# case with string
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", "4")
Traceback (most recent call last):
...
TypeError: age must be an integer

# case with incomplete tuple
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
...
TypeError: age must be an integer

# case with whatever this is
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
...
TypeError: age must be an integer

# case with bool
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", True)
Traceback (most recent call last):
...
TypeError: age must be an integer

# case with tuple
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
...
TypeError: age must be an integer

# case with None
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
...
TypeError: age must be an integer
